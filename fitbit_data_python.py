# -*- coding: utf-8 -*-
"""Fitbit_Data_Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CRA5o0i0sUcEf3VwoiOfli6ImyvmMlNl
"""

!pip install pyspark

import os
import sys
import pyspark
import numpy as np
import pandas as pd
from pyspark.sql import SparkSession

sc = pyspark.SparkContext(master="local[*]", appName="FirstExample")

print(sc)

spark = SparkSession.builder.appName("First Example").config("local").getOrCreate()

spark.sparkContext

daily_activity = spark.read.option("Header","true").csv("dailyActivity_merged1.csv")
sleep_day = spark.read.option("Header","true").csv("sleepDay_merged.csv")
weight_log = spark.read.option("Header","true").csv("weightLogInfo_merged.csv")
#heart_rate = spark.read.option("Header","true").csv("heart_rate_merged.csv")
# Creates SQL table
daily_table = daily_activity.createOrReplaceTempView("fitbit")
sleep_table = sleep_day.createOrReplaceTempView("sleep")
weight_table= weight_log.createOrReplaceTempView("weight")

print('Daily Activity Data')
daily_activity.show()
print('Sleep Day Data')
sleep_day.show()
print('Weight Log Data')
weight_log.show()

UserDistanceSleep=spark.sql("select distinct f.ID, f.ActivityDate, f.Calories, f.TotalDistance,s.SleepDay,s.TotalMinutesAsleep from fitbit f left join sleep s on f.ID=s.ID where s.TotalMinutesAsleep is not null and f.ID =1503960366")
UserDistanceSleep= UserDistanceSleep.withColumnRenamed("TotalMinutesAsleep","TotalSleepHours")
UserDistanceSleep.show(10)

UserDistanceSleep['TotalDistance'] = UserDistanceSleep['TotalDistance'].astype('float')
UserDistanceSleep['TotalMinutesAsleep'] = UserDistanceSleep['TotalMinutesAsleep'].astype('int')
UserDistanceSleep.plot.line(x="TotalMinutesAsleep", y="TotalDistance")



rdd2=UserDistanceSleep.rdd.map(lambda x:
    (x[0],x[1],x[2],x[3],x[4],(int(x[5])/60))
    )
df2=rdd2.toDF(["ID","ActivityDate","Calories","Total Distance","SleepDay","TotalSleepHours"])
df2.show(10)

calPerMileDF= df2.select(df2["Total Distance"],df2["Calories"])
calPerMileDF.createOrReplaceTempView("calMile")
#calPerMileDF.printSchema()
calPerMileDF= calPerMileDF.withColumn("Total Distance", calPerMileDF["Total Distance"].cast('float'))
calPerMileDF= calPerMileDF.withColumn("Calories", calPerMileDF["Calories"].cast('float'))
calPerMileDF.show(10)

for index, row_iterator in calPerMileDF.toPandas().iterrows():
  calPerMile= (row_iterator[1])/(row_iterator[0])
  print(calPerMile)

